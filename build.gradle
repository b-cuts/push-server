import java.awt.Desktop

/*
 * Copyright (c) 2014 Jacob D. Parr
 *
 * This software may not be used without permission.
 */
buildscript {
  repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://raw.githubusercontent.com/ben-manes/gradle-versions-plugin/mvnrepo/" }
  }
  dependencies {
    classpath 'org.hidetake:gradle-ssh-plugin:0.3.5'
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.5-beta-5'
  }
}
apply plugin: "ssh"

apply plugin: "project-report"

task openReportHtmlDependencyReport <<  {
  File reportFile = file("build\\reports\\project\\dependencies\\index.html")
  Desktop.getDesktop().browse(reportFile.toURI());
}
htmlDependencyReport {
  projects = project.allprojects
  finalizedBy(openReportHtmlDependencyReport)
}

subprojects {

  apply plugin: "java"
  apply plugin: "maven"
  apply plugin: "idea"
  apply plugin: "signing"
  apply plugin: 'versions'
  apply from: "../build.versions.gradle"

  group = "com.cosmicpush"

  repositories {
    mavenCentral()
    mavenLocal()
  }

  targetCompatibility = "1.8"
  sourceCompatibility = "1.8"

  sourceSets {
    main {
      java { srcDir 'src/main/java' }
      resources { srcDir 'src/main/resources' }
    }
    test {
      java { srcDir 'src/test/java' }
    }
  }

  test {
    useTestNG() {
      excludeGroups("integration")
    }
  }

  // Source jar
  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  // Java doc
  task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
  }

  // Test jar
  task testJar(type: Jar, dependsOn: testClasses) {
    classifier = 'tests'
    from sourceSets.test.output
  }

  configurations {
    tests
  }

  configurations.all({
    resolutionStrategy({
      failOnVersionConflict()
      force(
          "org.glassfish.jersey.core:jersey-client:2.13",
          "org.glassfish.jersey.core:jersey-common:2.13",
//          "org.glassfish.hk2:hk2-api:2.3.0-b10",
//          "org.glassfish.hk2:hk2-utils:2.3.0-b10",
//          "org.glassfish.hk2:hk2-locator:2.3.0-b10",
//          "org.glassfish.hk2.external:javax.inject:2.3.0-b10",
//
          "org.crazyyak.lib:yak-lib-jaxrs-jackson:4.0.2",

          "javax.ws.rs:javax.ws.rs-api:2.0.1",
          "com.fasterxml.jackson.core:jackson-core:2.4.1.1",
          "com.fasterxml.jackson.core:jackson-databind:2.4.1.3",
          "com.fasterxml.jackson.core:jackson-annotations:2.4.1",
          "commons-logging:commons-logging:1.1.3",
          "javax.servlet.jsp:jsp-api:2.2",
          "javax.servlet:servlet-api:2.5",
          "org.springframework:spring-core:4.0.0.RELEASE",
          "org.springframework:spring-web:4.0.0.RELEASE",
          "org.springframework:spring-context:4.0.0.RELEASE",
          "org.springframework:spring-beans:4.0.0.RELEASE",
          "org.springframework:spring-aop:4.0.0.RELEASE",
          "org.springframework:spring-expression:4.0.0.RELEASE",
          "commons-codec:commons-codec:1.6",
          "org.javassist:javassist:3.18.1-GA")

    })
  })

  dependencies {
    testCompile group: 'org.testng', name: 'testng', version: '6.8.7', transitive: true
  }

  // Include artifacts configured above
  artifacts {
    archives sourcesJar
    archives javadocJar
  }
}

task checkLibVersions << {
  def checked = [:]
  allprojects {
    configurations.each { configuration ->
      configuration.allDependencies.each { dependency ->
        def version = dependency.version
        if(!version.contains('SNAPSHOT') && !checked[dependency]) {
          def group = dependency.group
          def path = group.replace('.', '/')
          def name = dependency.name
          def url = "http://repo1.maven.org/maven2/$path/$name/"
          try {
            def versions = new TreeMap(Comparator.reverseOrder())
            def text = url.toURL().text;
            text = text.substring(text.indexOf("</a>") + 4, text.indexOf("</pre>"));
            text.trim().eachLine {
              def value = it.substring(it.indexOf(">") + 1, it.indexOf("</a>")).replace("/", "");
              if (Character.isDigit(value.charAt(0)) == false) return;
              def parts = value.tokenize(".");
              for (def i = 0; i < parts.size(); i++) {
                parts[i] = parts[i].padLeft(3, "0")
              }
              def key = parts.toString().replace(", ", ".").replace("[", "").replace("]", "");
              versions.put(key, value)
            }
            def newest = versions.iterator().next().value//.replace(".RELEASE", "");
            //version = version.replace(".RELEASE", "");

            if (version != newest) {
              printf("%-20s %-20s $group:$name\n", "$version ->", "$newest");
            }

          } catch (FileNotFoundException ignored) {
            printf("%-40s $group:$name $version\n", "**NOT FOUND**");
          } catch (Throwable e) {
            e.printStackTrace()
          }
          checked[dependency] = true
        }
      }
    }
  }
}
