/*
 * Copyright (c) 2014 Jacob D. Parr
 *
 * This software may not be used without permission.
 */
project(":push-server-app") {
  description = "Cosmic Push Engine"

  version = pushServerApp

  apply (plugin: "war")
  apply (from: "../build-config-deployer.gradle")

  configurations {
    provided
  }

  sourceSets {
    main.compileClasspath += configurations.provided
    test.compileClasspath += configurations.provided
    test.runtimeClasspath += configurations.provided
  }

  dependencies {
    compile project(":push-server-pub")
    compile project(":push-server-jackson")
    compile project(":push-server-common");

    compile project(":push-server-plugin-ses")
    compile project(":push-server-plugin-smtp")
    compile project(":push-server-plugin-gtalk")
    compile project(":push-server-plugin-ocs-message")
    compile project(":push-server-plugin-twilio")

    compile ("org.crazyyak.dev:yak-dev-common:$yakDevCommon")
    compile ("org.crazyyak.dev:yak-dev-domain:$yakDevDomain")

    compile ("org.crazyyak.apis:yak-apis-google:$yakApisGoogle")

    compile ("org.crazyyak.lib:yak-lib-jaxrs:$yakLibJaxrs")
    compile ("org.crazyyak.lib:yak-lib-servlet:$yakLibServlet")
    compile ("org.crazyyak.lib:yak-lib-jaxrs-jackson:$yakLibJaxrsJackson")

    compile ("org.crazyyak.app:yak-app-common:$yakAppCommon")

    compile ("org.slf4j:slf4j-simple:1.7.10")
    compile ("org.thymeleaf:thymeleaf:2.1.4.RELEASE")
    compile ("org.thymeleaf.extras:thymeleaf-extras-java8time:2.1.0.RELEASE")

    compile("org.glassfish.jersey.containers:jersey-container-servlet:$jerseyVersion")
    compile("org.glassfish.jersey.media:jersey-media-multipart:$jerseyVersion")

    provided ("javax.servlet.jsp:jsp-api:2.2.1-b03")
    provided ("javax.servlet:javax.servlet-api:3.1.0")

    testCompile ("org.testng:testng:6.8.17")
  }

  configurations.all({
    resolutionStrategy({
      force(
          "org.slf4j:slf4j:1.7.10",
          "org.slf4j:slf4j-api:1.7.10",
          "org.javassist:javassist:3.18.1-GA",
          "commons-logging:commons-logging:1.2",
          "org.thymeleaf:thymeleaf:2.1.4.RELEASE",
          "com.fasterxml.jackson.core:jackson-databind:2.5.0",
              "org.apache.httpcomponents:httpclient:4.3.4"
      )
    })
  })



  /********************************************
   * Deploys the app to the production server *
   ********************************************/

  apply plugin: "org.hidetake.ssh"
  remotes {
    webServer {
      host = "107.170.247.182"
      user = "root"
    }
  }
  task stageFiles(type: SshTask, dependsOn: war) {
    ssh {
      identity = file("${cosmicPushKey}") // Enable public key authentication
      knownHosts = allowAnyHosts          // Disable host key verification
      pty = true; // Enable PTY allocation for sudo
    }
    session(remotes.webServer) {
      // Put a built WAR to the server
      def copyOf = new File((File)war.archivePath.parentFile, "push-server-${project.version}.war");
      if (copyOf.exists() == false) {
        copyOf.bytes = war.archivePath.bytes
      }
      System.out.printf("Uploading " + copyOf);
      put(copyOf.absolutePath, "/opt/staging/")
    }
  }
}
